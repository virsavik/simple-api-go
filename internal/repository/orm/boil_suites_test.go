// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProducts)
	t.Run("Invoices", testInvoices)
	t.Run("Products", testProducts)
	t.Run("Roles", testRoles)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsDelete)
	t.Run("Invoices", testInvoicesDelete)
	t.Run("Products", testProductsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsQueryDeleteAll)
	t.Run("Invoices", testInvoicesQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsSliceDeleteAll)
	t.Run("Invoices", testInvoicesSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsExists)
	t.Run("Invoices", testInvoicesExists)
	t.Run("Products", testProductsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsFind)
	t.Run("Invoices", testInvoicesFind)
	t.Run("Products", testProductsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsBind)
	t.Run("Invoices", testInvoicesBind)
	t.Run("Products", testProductsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsOne)
	t.Run("Invoices", testInvoicesOne)
	t.Run("Products", testProductsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsAll)
	t.Run("Invoices", testInvoicesAll)
	t.Run("Products", testProductsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsCount)
	t.Run("Invoices", testInvoicesCount)
	t.Run("Products", testProductsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsHooks)
	t.Run("Invoices", testInvoicesHooks)
	t.Run("Products", testProductsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsInsert)
	t.Run("InvoiceProducts", testInvoiceProductsInsertWhitelist)
	t.Run("Invoices", testInvoicesInsert)
	t.Run("Invoices", testInvoicesInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("InvoiceProductToInvoiceUsingInvoice", testInvoiceProductToOneInvoiceUsingInvoice)
	t.Run("InvoiceProductToProductUsingProduct", testInvoiceProductToOneProductUsingProduct)
	t.Run("InvoiceToUserUsingStorekeeper", testInvoiceToOneUserUsingStorekeeper)
	t.Run("UserToRoleUsingRoleNameRole", testUserToOneRoleUsingRoleNameRole)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("InvoiceToInvoiceProducts", testInvoiceToManyInvoiceProducts)
	t.Run("ProductToInvoiceProducts", testProductToManyInvoiceProducts)
	t.Run("RoleToRoleNameUsers", testRoleToManyRoleNameUsers)
	t.Run("UserToStorekeeperInvoices", testUserToManyStorekeeperInvoices)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("InvoiceProductToInvoiceUsingInvoiceProducts", testInvoiceProductToOneSetOpInvoiceUsingInvoice)
	t.Run("InvoiceProductToProductUsingInvoiceProducts", testInvoiceProductToOneSetOpProductUsingProduct)
	t.Run("InvoiceToUserUsingStorekeeperInvoices", testInvoiceToOneSetOpUserUsingStorekeeper)
	t.Run("UserToRoleUsingRoleNameUsers", testUserToOneSetOpRoleUsingRoleNameRole)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("InvoiceToInvoiceProducts", testInvoiceToManyAddOpInvoiceProducts)
	t.Run("ProductToInvoiceProducts", testProductToManyAddOpInvoiceProducts)
	t.Run("RoleToRoleNameUsers", testRoleToManyAddOpRoleNameUsers)
	t.Run("UserToStorekeeperInvoices", testUserToManyAddOpStorekeeperInvoices)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsReload)
	t.Run("Invoices", testInvoicesReload)
	t.Run("Products", testProductsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsReloadAll)
	t.Run("Invoices", testInvoicesReloadAll)
	t.Run("Products", testProductsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsSelect)
	t.Run("Invoices", testInvoicesSelect)
	t.Run("Products", testProductsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsUpdate)
	t.Run("Invoices", testInvoicesUpdate)
	t.Run("Products", testProductsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("InvoiceProducts", testInvoiceProductsSliceUpdateAll)
	t.Run("Invoices", testInvoicesSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
